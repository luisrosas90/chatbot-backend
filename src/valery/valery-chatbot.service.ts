/**
 * Servicio especializado para manejar chatbots de tipo Valery.
 * Gestiona sesiones persistentes, autenticaci√≥n autom√°tica, b√∫squedas inteligentes
 * y an√°lisis de patrones de usuario para una experiencia personalizada.
 * 
 * @class ValeryChatbotService
 */
import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import { ValeryDbService } from './valery-db.service';
import { TemplateService, TemplateContext } from '../chat/services/template.service';
import { AutoResponseService } from '../chat/services/auto-response.service';
import { ChatService } from '../chat/chat.service';
import { TemplateType } from '../chat/entities/message-template.entity';
import { PersistentSession } from '../chat/entities/persistent-session.entity';
import { SearchHistory } from '../chat/entities/search-history.entity';
import { ShoppingCart } from '../chat/entities/shopping-cart.entity';
import { ChatMessage } from '../chat/entities/message.entity';

interface EstadoChat {
  paso: number;
  cliente?: any;
  productos: any[];
  metodoPago?: any;
  banco?: any;
  total: number;
  subtotal: number;
  iva: number;
  tipoEntrega?: string;
  direccionEntrega?: string;
  cedulaRifIngresada?: string;
  nombreCompletoIngresado?: string;
  carritoCompras: any[];
  idPedidoCreado?: string;
  comprobanteInfo?: string;
  ocrMontoReportado?: string;
  ocrReferenciaReportada?: string;
  modoDebug?: boolean;
}

@Injectable()
export class ValeryChatbotService {
  private readonly logger = new Logger(ValeryChatbotService.name);
  private estadosChat: Map<string, EstadoChat> = new Map();
  private readonly SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 horas para sesiones persistentes

  constructor(
    private readonly configService: ConfigService,
    private valeryDbService: ValeryDbService,
    @Inject(forwardRef(() => TemplateService))
    private templateService: TemplateService,
    @Inject(forwardRef(() => AutoResponseService))
    private autoResponseService: AutoResponseService,
    @Inject(forwardRef(() => ChatService))
    private chatService: ChatService
  ) {
    this.logger.log('ValeryChatbotService inicializado con persistencia completa');
    // Limpiar sesiones inactivas cada 30 minutos
    setInterval(() => this.cleanInactiveSessions(), 30 * 60 * 1000);
  }

  async handleMessage(message: string, phoneNumber: string, chatbotId: string): Promise<string> {
    try {
      this.logger.debug(`üì± Procesando mensaje de ${phoneNumber}: ${message}`);
      
      // Normalizar n√∫mero de tel√©fono
      const normalizedPhoneNumber = this.normalizePhoneNumber(phoneNumber);
      
      // Obtener o crear sesi√≥n persistente
      let session = await this.getOrCreateSession(normalizedPhoneNumber, chatbotId);
      
      // Si es una nueva sesi√≥n (messageCount === 0), buscar cliente autom√°ticamente
      if (session.messageCount === 0) {
        await this.autoAuthenticateByPhone(session);
        
        // Incrementar messageCount ANTES de generar el mensaje de bienvenida
        session.messageCount += 1;
        session.lastActivity = new Date();
        session.lastUserMessage = message;
        
        await this.chatService.saveSession(session);
        
        // Generar saludo personalizado e inteligente
        const welcomeMessage = await this.generateIntelligentWelcome(session, chatbotId);
        session.lastBotResponse = welcomeMessage;
        await this.chatService.saveSession(session);
        await this.saveMessage(session, message, welcomeMessage);
        return welcomeMessage;
      }
      
      // Actualizar actividad de la sesi√≥n para mensajes subsiguientes
      session.lastActivity = new Date();
      session.lastUserMessage = message;
      session.messageCount += 1;
      
      // Analizar y procesar el mensaje con IA
      const response = await this.processIntelligentMessage(message, session, chatbotId);
      
      // Guardar el intercambio de mensajes
      session.lastBotResponse = response;
      await this.chatService.saveSession(session);
      await this.saveMessage(session, message, response);
      
      return response;
      
    } catch (error) {
      this.logger.error(`‚ùå Error cr√≠tico al procesar mensaje: ${error.message}`, error.stack);
      
      // Respuesta de error inteligente
      const errorMessage = await this.handleIntelligentError(error, chatbotId);
      return errorMessage;
    }
  }

  private async getOrCreateSession(phoneNumber: string, chatbotId: string): Promise<PersistentSession> {
    try {
      let session = await this.chatService.findSession(phoneNumber, 'active');

      if (!session) {
        session = this.chatService.createSession(phoneNumber, chatbotId, 'active');
        await this.chatService.saveSession(session);
        this.logger.debug(`üÜï Nueva sesi√≥n persistente creada: ${session.id}`);
      } else {
        // Verificar si la sesi√≥n ha expirado
        const timeSinceLastActivity = Date.now() - session.lastActivity.getTime();
        if (timeSinceLastActivity > this.SESSION_TIMEOUT) {
          // Reactivar sesi√≥n expirada
          session.status = 'active';
          session.lastActivity = new Date();
          this.logger.debug(`üîÑ Sesi√≥n reactivada: ${session.id}`);
        }
      }

      return session;
    } catch (error) {
      this.logger.error(`Error al obtener/crear sesi√≥n: ${error.message}`);
      throw error;
    }
  }

  private normalizePhoneNumber(phoneNumber: string): string {
    // Limpiar y normalizar n√∫mero de tel√©fono
    const cleanNumber = phoneNumber.replace(/@s\.whatsapp\.net|[\s\-\(\)]/g, '');
    
    // Convertir formato internacional a local venezolano
    if (cleanNumber.startsWith('58') && cleanNumber.length > 10) {
      return '0' + cleanNumber.slice(2);
    }
    
    return cleanNumber;
  }

  private async autoAuthenticateByPhone(session: PersistentSession): Promise<void> {
    try {
      this.logger.debug(`üîç Buscando cliente por tel√©fono: ${session.phoneNumber}`);
      
      const query = `
        SELECT 
          c.codigocliente,
          c.nombre,
          c.direccion1,
          c.telefono1,
          c.telefono2,
          c.status,
          c.rif,
          c.tienecredito,
          c.diascredito,
          c.saldo,
          c.fechaultimaventa,
          c.fechacreacion
        FROM clientes c
        WHERE c.telefono1 = $1 OR c.telefono2 = $1
        ORDER BY c.fechaultimaventa DESC NULLS LAST
        LIMIT 1
      `;
      
      const results = await this.valeryDbService.ejecutarQuery(query, [session.phoneNumber]);
      
      if (results && results.length > 0) {
        const cliente = results[0];
        
        // Cliente encontrado - autenticar autom√°ticamente
        session.clientId = cliente.codigocliente;
        session.clientName = cliente.nombre;
        session.identificationNumber = cliente.rif;
        session.isAuthenticated = true;
        session.isNewClient = false;
        session.context = 'menu';
        session.metadata = {
          ...session.metadata,
          clientInfo: {
            hasCredit: !!cliente.tienecredito,
            creditDays: cliente.diascredito,
            balance: cliente.saldo,
            lastPurchase: cliente.fechaultimaventa,
            registrationDate: cliente.fechacreacion
          }
        };
        
        this.logger.debug(`‚úÖ Cliente autenticado: ${cliente.nombre} (${cliente.codigocliente})`);
      } else {
        // Cliente no encontrado
        session.isNewClient = true;
        session.isAuthenticated = false;
        session.context = 'new_client';
        
        this.logger.debug(`üë§ Cliente nuevo detectado: ${session.phoneNumber}`);
      }
    } catch (error) {
      this.logger.error(`Error en autenticaci√≥n autom√°tica: ${error.message}`);
      // En caso de error, tratar como cliente nuevo
      session.isNewClient = true;
      session.isAuthenticated = false;
      session.context = 'error_fallback';
    }
  }

  private async generateIntelligentWelcome(session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const currentHour = new Date().getHours();
      let timeGreeting = this.getTimeBasedGreeting(currentHour);
      
      if (session.isAuthenticated && !session.isNewClient) {
        // Cliente existente - saludo personalizado con an√°lisis de comportamiento
        const recentSearches = await this.getRecentSearches(session.phoneNumber, 5);
        const cartItems = await this.getActiveCartItems(session.phoneNumber);
        
        let personalizedMessage = `üéâ ${timeGreeting}, **${session.clientName}**! üåü\n`;
        personalizedMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        personalizedMessage += `‚ú® ¬°Qu√© alegr√≠a tenerle de vuelta en **G√≥mezMarket**! ‚ú®\n\n`;
        
        // A√±adir informaci√≥n contextual inteligente
        if (cartItems.length > 0) {
          personalizedMessage += `üõí **CARRITO GUARDADO** üõí\n`;
          personalizedMessage += `üì¶ Tiene ${cartItems.length} producto(s) esper√°ndole\n`;
          personalizedMessage += `üíæ Todo guardado y listo para continuar\n\n`;
        }
        
        if (recentSearches.length > 0) {
          const lastSearch = recentSearches[0];
          const daysSinceLastSearch = Math.floor((Date.now() - lastSearch.createdAt.getTime()) / (1000 * 60 * 60 * 24));
          
          if (daysSinceLastSearch <= 7) {
            personalizedMessage += `üîç **B√öSQUEDAS RECIENTES** üîç\n`;
            personalizedMessage += `üí° ¬øBusca algo similar a "${lastSearch.originalSearchTerm}"?\n`;
            personalizedMessage += `üìà Tenemos nuevas ofertas disponibles\n\n`;
          }
        }
        
        personalizedMessage += `üéØ **¬øEN QU√â LE PUEDO AYUDAR HOY?** üéØ\n`;
        personalizedMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
        personalizedMessage += `1Ô∏è‚É£ üîç **Consultar productos** ‚Üí Buscar ofertas\n`;
        personalizedMessage += `2Ô∏è‚É£ üí∞ **Ver mi saldo** ‚Üí Estado de cuenta\n`;
        personalizedMessage += `3Ô∏è‚É£ üìÑ **Historial facturas** ‚Üí Mis compras\n`;
        personalizedMessage += `4Ô∏è‚É£ üõí **Hacer un pedido** ‚Üí ¬°Comprar ahora!\n\n`;
        personalizedMessage += `üí¨ O simplemente escriba lo que necesita... üöÄ`;
        
        return personalizedMessage;
      } else {
        // Cliente nuevo - bienvenida impactante
        return `üéä ${timeGreeting}! üéä\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üåü **¬°BIENVENIDO A G√ìMEZMARKET!** üåü\n` +
               `ü§ñ Soy **G√≥mezBot**, su asistente personal\n\n` +
               `üéØ **PARA COMENZAR** üéØ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìù Ind√≠queme su **c√©dula o RIF**\n` +
               `‚ú® Le ofrecer√© un servicio personalizado\n` +
               `üöÄ ¬°Descubra nuestras ofertas exclusivas!\n\n` +
               `üìå **Ejemplo:** V12345678 o J408079305\n` +
               `üíé ¬°Su experiencia premium comienza aqu√≠! üíé`;
      }
    } catch (error) {
      this.logger.error(`Error generando bienvenida: ${error.message}`);
      return `üéâ ¬°BIENVENIDO A G√ìMEZMARKET! üéâ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `ü§ñ Soy **G√≥mezBot** üöÄ\n` +
             `‚ú® ¬øEn qu√© puedo ayudarle hoy? ‚ú®`;
    }
  }

  private getTimeBasedGreeting(hour: number): string {
    if (hour >= 6 && hour <= 11) return 'üåÖ ¬°BUENOS D√çAS';
    if (hour >= 12 && hour <= 18) return '‚òÄÔ∏è ¬°BUENAS TARDES';
    if (hour > 18 && hour <= 23) return 'üåô ¬°BUENAS NOCHES';
    return 'üåú ¬°BUENA MADRUGADA';
  }

  private async processIntelligentMessage(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      // Normalizar y analizar el mensaje
      const normalizedMessage = this.normalizeMessage(message);
      const messageIntent = await this.analyzeMessageIntent(normalizedMessage, session);
      
      this.logger.debug(`üß† Intenci√≥n detectada: ${messageIntent.type} (confianza: ${messageIntent.confidence})`);
      
      // Si est√° en proceso de registro, manejar el registro
      if (session.context === 'new_client_registration') {
        return await this.handleNewClientRegistration(message, session, chatbotId);
      }
      
      // Si est√° en selecci√≥n de m√©todo de pago
      if (session.context === 'checkout_payment_selection') {
        if (message.toLowerCase().includes('cancelar')) {
          session.context = 'menu';
          await this.chatService.saveSession(session);
          return `üîÑ **CHECKOUT CANCELADO** üîÑ\n` +
                 `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
                 `‚Ü©Ô∏è Regresando al men√∫ principal\n` +
                 `üõí Su carrito se mantiene intacto\n\n` +
                 `üéØ **¬øQu√© desea hacer?**\n` +
                 `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
                 `üîç Seguir comprando\n` +
                 `üëÄ Ver carrito\n` +
                 `üí¨ Buscar productos`;
        }
        return await this.handlePaymentSelection(message, session, chatbotId);
      }

      // Nuevos contextos para validaci√≥n de pago m√≥vil
      if (session.context === 'payment_bank_selection') {
        return await this.handleBankSelection(message, session, chatbotId);
      }

      if (session.context === 'payment_phone_input') {
        return await this.handlePaymentPhoneInput(message, session, chatbotId);
      }

      if (session.context === 'payment_cedula_input') {
        return await this.handlePaymentCedulaInput(message, session, chatbotId);
      }

      if (session.context === 'payment_reference_input') {
        return await this.handlePaymentReferenceInput(message, session, chatbotId);
      }

      // Manejo de b√∫squeda por listas
      if (session.context === 'product_search' && this.esListaProductos(message)) {
        return await this.handleProductListSearch(message, session, chatbotId);
      }
      
      // Procesar seg√∫n la intenci√≥n y contexto
      switch (messageIntent.type) {
        case 'product_search':
          return await this.handleIntelligentProductSearch(messageIntent.entities.searchTerm, session, chatbotId);
          
        case 'menu_option':
          return await this.handleMenuOption(messageIntent.entities.option, session, chatbotId);
          
        case 'cart_action':
          return await this.handleCartAction(messageIntent.entities.action, messageIntent.entities.product, session, chatbotId);
          
        case 'identification':
          return await this.handleClientIdentification(messageIntent.entities.identification, session, chatbotId);
          
        case 'greeting':
          return await this.handleGreeting(session, chatbotId);
          
        case 'help':
          return await this.handleHelpRequest(session, chatbotId);
          
        default:
          return await this.handleUnknownIntent(message, session, chatbotId);
      }
    } catch (error) {
      this.logger.error(`Error procesando mensaje inteligente: ${error.message}`);
      return await this.handleIntelligentError(error, chatbotId);
    }
  }

  private async handleIntelligentProductSearch(searchTerm: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      session.context = 'product_search';
      session.searchCount += 1;
      
      // Normalizar t√©rmino de b√∫squeda
      const normalizedSearchTerm = this.normalizeSearchTerm(searchTerm);
      
      // B√∫squeda inteligente con m√∫ltiples estrategias
      const searchStrategies = [
        // B√∫squeda exacta
        { term: normalizedSearchTerm, type: 'exact' },
        // B√∫squeda por palabras individuales
        { term: normalizedSearchTerm, type: 'words' },
        // B√∫squeda con sin√≥nimos (si implementas)
        // { term: await this.expandWithSynonyms(normalizedSearchTerm), type: 'synonyms' }
      ];
      
      let productos = [];
      let searchType = '';
      
      for (const strategy of searchStrategies) {
        productos = await this.searchProductsWithStrategy(strategy.term, strategy.type);
        if (productos.length > 0) {
          searchType = strategy.type;
          break;
        }
      }
      
      // Guardar b√∫squeda en historial
      await this.saveSearchHistory(session, searchTerm, normalizedSearchTerm, productos.length, chatbotId);
      
      if (productos.length === 0) {
        // Sugerir b√∫squedas alternativas basadas en historial
        const suggestions = await this.getSimilarSearchSuggestions(session.phoneNumber, normalizedSearchTerm);
        
        let response = `üòî **¬°NO ENCONTRAMOS PRODUCTOS!** üòî\n`;
        response += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        response += `üîç B√∫squeda: "${searchTerm}"\n`;
        response += `‚ùå Sin resultados disponibles\n\n`;
        
        if (suggestions.length > 0) {
          response += `üí° **¬øQUIZ√ÅS BUSCABA ESTO?** üí°\n`;
          response += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
          suggestions.forEach((suggestion, index) => {
            response += `${index + 1}Ô∏è‚É£ ${suggestion}\n`;
          });
          response += `\n`;
        }
        
        response += `üéØ **SUGERENCIAS:** üéØ\n`;
        response += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        response += `üîÑ Intente con otra marca\n`;
        response += `üìù Use t√©rminos m√°s generales\n`;
        response += `üí¨ Escriba "ayuda" para ejemplos\n\n`;
        response += `üöÄ ¬°Seguimos buscando para usted! üöÄ`;
        
        return response;
      }
      
      // Formatear resultados con informaci√≥n inteligente
      return await this.formatIntelligentProductResults(productos, searchTerm, searchType, session);
      
    } catch (error) {
      this.logger.error(`Error en b√∫squeda inteligente: ${error.message}`);
      throw error;
    }
  }

  private async searchProductsWithStrategy(searchTerm: string, type: string): Promise<any[]> {
    let query = '';
    let params = [];
    
    // DIAGN√ìSTICO TEMPORAL - Consulta de ejemplo para ver qu√© productos existen
    try {
      const diagnosticQuery = `
        SELECT 
          i.codigo,
          i.nombre,
          i.preciounidad,
          i.alicuotaiva,
          i.existenciaunidad,
          i.status,
          (SELECT factorcambio FROM monedas WHERE codmoneda = '02' LIMIT 1) AS tasa_actual
        FROM inventario i
        WHERE LOWER(i.nombre) LIKE '%azucar%' OR LOWER(i.nombre) LIKE '%pasta%'
        ORDER BY i.nombre
        LIMIT 10
      `;
      
      const diagnosticResults = await this.valeryDbService.ejecutarQuery(diagnosticQuery);
      this.logger.log(`üîç DIAGN√ìSTICO - Productos con 'azucar' o 'pasta': ${JSON.stringify(diagnosticResults, null, 2)}`);
      
      // Tambi√©n verificar algunos productos al azar
      const randomQuery = `
        SELECT 
          i.codigo,
          i.nombre,
          i.preciounidad,
          i.existenciaunidad,
          i.status
        FROM inventario i
        LIMIT 5
      `;
      
      const randomResults = await this.valeryDbService.ejecutarQuery(randomQuery);
      this.logger.log(`üîç DIAGN√ìSTICO - Productos al azar: ${JSON.stringify(randomResults, null, 2)}`);
      
    } catch (diagnosticError) {
      this.logger.error(`Error en diagn√≥stico: ${diagnosticError.message}`);
    }
    
    switch (type) {
      case 'exact':
        query = `
          SELECT 
            i.codigo,
            i.nombre,
            i.preciounidad,
            i.alicuotaiva,
            i.existenciaunidad,
            (SELECT factorcambio FROM monedas WHERE codmoneda = '02' LIMIT 1) AS tasa_actual
          FROM inventario i
          WHERE (i.status = 'A' OR i.status = '1')
            AND i.existenciaunidad >= 2
            AND LOWER(TRANSLATE(i.nombre, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU')) LIKE LOWER(TRANSLATE($1, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU'))
          ORDER BY 
            CASE WHEN LOWER(TRANSLATE(i.nombre, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU')) LIKE LOWER(TRANSLATE($2, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU')) THEN 0 ELSE 1 END,
            i.existenciaunidad DESC,
            LENGTH(i.nombre),
            i.nombre
          LIMIT 20
        `;
        params = [`%${searchTerm}%`, `${searchTerm}%`];
        break;
        
      case 'words':
        const words = searchTerm.split(' ').filter(word => word.length > 2);
        if (words.length === 0) return [];
        
        // Construir condiciones y par√°metros correctamente
        const conditions = [];
        const wordParams = [];
        
        for (let i = 0; i < words.length; i++) {
          conditions.push(`LOWER(TRANSLATE(i.nombre, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU')) LIKE LOWER(TRANSLATE($${i + 1}, '√±√°√©√≠√≥√∫√º√ë√Å√â√ç√ì√ö√ú', 'naeiouuNAEIOUU'))`);
          wordParams.push(`%${words[i]}%`);
        }
        
        query = `
          SELECT 
            i.codigo,
            i.nombre,
            i.preciounidad,
            i.alicuotaiva,
            i.existenciaunidad,
            (SELECT factorcambio FROM monedas WHERE codmoneda = '02' LIMIT 1) AS tasa_actual
          FROM inventario i
          WHERE (i.status = 'A' OR i.status = '1')
            AND i.existenciaunidad >= 2
            AND (${conditions.join(' AND ')})
          ORDER BY i.existenciaunidad DESC, i.nombre
          LIMIT 15
        `;
        params = wordParams;
        break;
    }
    
    const results = await this.valeryDbService.ejecutarQuery(query, params);
    this.logger.log(`üîç B√∫squeda "${searchTerm}" (${type}): ${results.length} resultados`);
    
    return results;
  }

  private async formatIntelligentProductResults(productos: any[], searchTerm: string, searchType: string, session: PersistentSession): Promise<string> {
    let respuesta = `üõçÔ∏è **¬°PRODUCTOS ENCONTRADOS!** üõçÔ∏è\n`;
    respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    respuesta += `üîç B√∫squeda: "${searchTerm}"\n`;
    respuesta += `üì¶ ${productos.length} productos disponibles\n\n`;
    
    for (let i = 0; i < productos.length; i++) {
      const p = productos[i];
      if (!p.nombre || !p.preciounidad || !p.tasa_actual) continue;

      const precioUSD = (parseFloat(p.preciounidad) || 0).toFixed(2);
      const precioBs = this.calcularPrecioBs(p.preciounidad, p.alicuotaiva, p.tasa_actual).toFixed(2);

      respuesta += `üè∑Ô∏è **PRODUCTO ${i + 1}** üè∑Ô∏è\n`;
      respuesta += `üìå **${p.nombre}**\n`;
      respuesta += `üíµ **USD:** $${precioUSD}\n`;
      respuesta += `üáªüá™ **Bol√≠vares:** Bs ${precioBs}\n\n`;
    }
    
    // A√±adir informaci√≥n contextual inteligente
    if (searchType === 'words') {
      respuesta += `üí° **B√öSQUEDA EXPANDIDA** üí°\n`;
      respuesta += `üéØ Resultados por palabras clave\n\n`;
    }
    
    respuesta += `üõí **¬øC√ìMO AGREGAR AL CARRITO?** üõí\n`;
    respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    respuesta += `‚úÖ "Agregar [n√∫mero] al carrito"\n`;
    respuesta += `‚úÖ "Quiero el producto [n√∫mero]"\n\n`;
    respuesta += `üîç **¬øDesea refinar su b√∫squeda?** üîç\n`;
    respuesta += `üí¨ ¬°Escriba otra consulta o elija opciones! üöÄ`;
    
    return respuesta;
  }

  // Funci√≥n para calcular precio en Bs con IVA y redondear al m√∫ltiplo m√°s cercano
  private calcularPrecioBs(precioUSD: number | string, alicuota: number | string, tasa: number | string): number {
    const base = Number(precioUSD) || 0;
    const iva = Number(alicuota) || 0;
    const tasaCambio = Number(tasa) || 1;
    const conIVA = base * (1 + (iva / 100));
    const bs = conIVA * tasaCambio;
    return Math.round(bs * 10) / 10; // redondeo al m√∫ltiplo de 0.10
  }

  private normalizeMessage(message: string): string {
    return message.toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^\w\s]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }

  private normalizeSearchTerm(term: string): string {
    return term.toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^\w\s]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }

  private async analyzeMessageIntent(message: string, session: PersistentSession): Promise<any> {
    // An√°lisis b√°sico de intenciones (puedes expandir con NLP m√°s avanzado)
    const patterns = {
      product_search: [
        /busco?|buscar|necesito|quiero(?!\s+(el\s+)?producto\s+\d)|dame|tienes?|hay|vendo?|vender/,
        /producto(?!\s+\d)|marca|presentacion|litro|kilo|gramo|paquete/
      ],
      menu_option: [
        /^[1-4]$|^[1-4]Ô∏è‚É£$|saldo|factura|pedido(?!\s)|historial/
      ],
      cart_action: [
        /carrito|agregar|a√±adir|quitar|eliminar|comprar(?!\s)|finalizar|proceder/,
        /quiero\s+(el\s+)?producto\s+\d+|agregar\s+producto\s+\d+|producto\s+\d+\s+al\s+carrito/,
        /ver\s+carrito|mi\s+carrito|vaciar\s+carrito|limpiar\s+carrito/
      ],
      identification: [
        /^[vVeEjJpP]?-?\d{6,9}$/
      ],
      greeting: [
        /hola|buenos?|buenas?|saludos|hey|hi/
      ],
      help: [
        /ayuda|help|como|que puedo|opciones|menu/
      ]
    };
    
    let bestMatch = { type: 'unknown', confidence: 0, entities: {} };
    
    for (const [intentType, regexList] of Object.entries(patterns)) {
      for (const regex of regexList) {
        if (regex.test(message)) {
          const confidence = this.calculateIntentConfidence(message, intentType);
          if (confidence > bestMatch.confidence) {
            bestMatch = {
              type: intentType,
              confidence,
              entities: this.extractEntities(message, intentType)
            };
          }
        }
      }
    }
    
    return bestMatch;
  }

  private calculateIntentConfidence(message: string, intentType: string): number {
    // L√≥gica simple de confianza (expandir con ML)
    const baseConfidence = 0.7;
    const lengthFactor = Math.min(message.length / 10, 1);
    return Math.min(baseConfidence + lengthFactor * 0.3, 1);
  }

  private extractEntities(message: string, intentType: string): any {
    const entities: any = {};
    
    switch (intentType) {
      case 'product_search':
        // Extraer t√©rmino de b√∫squeda eliminando palabras comunes
        const stopWords = ['busco', 'necesito', 'quiero', 'dame', 'tienes', 'hay', 'me', 'puedes', 'dar'];
        const words = message.split(' ').filter(word => 
          word.length > 2 && !stopWords.includes(word.toLowerCase())
        );
        entities.searchTerm = words.join(' ');
        break;
        
      case 'menu_option':
        const optionMatch = message.match(/[1-4]/);
        entities.option = optionMatch ? optionMatch[0] : null;
        break;

      case 'cart_action':
        // Extraer acci√≥n del carrito y n√∫mero de producto si existe
        entities.action = message.toLowerCase();
        
        // Buscar n√∫mero de producto
        const productNumberMatch = message.match(/producto\s+(\d+)|(\d+)/);
        if (productNumberMatch) {
          entities.product = productNumberMatch[1] || productNumberMatch[2];
        }
        break;
        
      case 'identification':
        entities.identification = message.replace(/[^a-zA-Z0-9]/g, '');
        break;
    }
    
    return entities;
  }
  private async handleMenuOption(option: string, session: PersistentSession, chatbotId: string): Promise<string> {
    if (!session.isAuthenticated) {
      return `üîê **AUTENTICACI√ìN REQUERIDA** üîê\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üö´ Debe identificarse primero\n` +
             `üìù Ingrese su c√©dula o RIF\n` +
             `‚ú® ¬°Acceso personalizado garantizado! ‚ú®`;
    }
    
    switch (option) {
      case '1':
        session.context = 'product_search';
        return `üîç **¬°B√öSQUEDA DE PRODUCTOS!** üîç\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üéØ ¬øQu√© producto busca?\n` +
               `üí° Puede escribir:\n` +
               `‚ñ™Ô∏è Nombre del producto\n` +
               `‚ñ™Ô∏è Marca espec√≠fica\n` +
               `‚ñ™Ô∏è Categor√≠a\n\n` +
               `üìù **Ejemplos:**\n` +
               `ü•õ "leche completa"\n` +
               `üçû "pan integral"\n` +
               `üß¥ "champ√∫ beb√©"\n\n` +
               `üöÄ ¬°Escriba y descubra nuestras ofertas! üöÄ`;
        
      case '2':
        return await this.getSaldoCliente(session);
        
      case '3':
        return `üìÑ **HISTORIAL DE FACTURAS** üìÑ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üöß Funcionalidad en desarrollo\n` +
               `‚öôÔ∏è Pr√≥ximamente disponible\n` +
               `üìû Mientras tanto, contacte servicio\n` +
               `üîÑ ¬°Trabajamos para mejorar! üîÑ`;
        
      case '4':
        session.context = 'order_start';
        return `üõí **¬°CREAR NUEVO PEDIDO!** üõí\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üéØ **OPCIONES DISPONIBLES:**\n\n` +
               `1Ô∏è‚É£ üîç **Buscar productos**\n` +
               `    ‚Üí Explorar cat√°logo\n\n` +
               `2Ô∏è‚É£ üìù **Lista de productos**\n` +
               `    ‚Üí Escribir lo que necesita\n\n` +
               `üí° **¬øQu√© productos necesita?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üí¨ Escriba y comencemos... üöÄ`;
        
      default:
        return `‚ùå **OPCI√ìN NO V√ÅLIDA** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ Seleccione del 1 al 4\n` +
               `üí° Use los n√∫meros del men√∫\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
    }
  }

  private async getSaldoCliente(session: PersistentSession): Promise<string> {
    try {
      if (!session.clientId) {
        return `‚ùå **ERROR DE CUENTA** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üö´ No se encontr√≥ informaci√≥n\n` +
               `üìû Contacte servicio al cliente\n` +
               `üÜò ¬°Estamos aqu√≠ para ayudarle! üÜò`;
      }
      
      const query = `
        SELECT 
          c.nombre,
          c.tienecredito,
          c.diascredito,
          c.saldo,
          c.fechaultimaventa
        FROM clientes c
        WHERE c.codigocliente = $1
      `;
      
      const results = await this.valeryDbService.ejecutarQuery(query, [session.clientId]);
      
      if (results && results.length > 0) {
        const cliente = results[0];
        
        let respuesta = `üí∞ **ESTADO DE CUENTA** üí∞\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        respuesta += `üë§ **Cliente:** ${cliente.nombre}\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
        
        if (!cliente.tienecredito) {
          respuesta += `üí≥ **MODALIDAD DE PAGO** üí≥\n`;
          respuesta += `üìã Tipo: **CONTADO**\n`;
          respuesta += `üö´ Sin l√≠nea de cr√©dito activa\n`;
          respuesta += `üí∞ Pagos inmediatos requeridos\n\n`;
        } else {
          respuesta += `üè¶ **CUENTA DE CR√âDITO** üè¶\n`;
          respuesta += `üìã Modalidad: **CR√âDITO**\n`;
          respuesta += `‚è∞ Plazo: ${cliente.diascredito} d√≠as\n`;
          respuesta += `üí∞ **Saldo actual:** ${this.formatearPrecio(cliente.saldo)}\n`;
          
          if (cliente.saldo > 0) {
            respuesta += `‚ö†Ô∏è **SALDO PENDIENTE** ‚ö†Ô∏è\n`;
          } else {
            respuesta += `‚úÖ **¬°AL D√çA CON PAGOS!** ‚úÖ\n`;
          }
          respuesta += `\n`;
        }
        
        if (cliente.fechaultimaventa) {
          const diasUltimaCompra = Math.floor((Date.now() - new Date(cliente.fechaultimaventa).getTime()) / (1000 * 60 * 60 * 24));
          respuesta += `üõçÔ∏è **√öLTIMA COMPRA** üõçÔ∏è\n`;
          respuesta += `üìÖ Hace ${diasUltimaCompra} d√≠as\n`;
          respuesta += `üîÑ ¬°Esperamos su pr√≥xima visita!\n\n`;
        }
        
        respuesta += `üéØ **¬øQU√â DESEA HACER?** üéØ\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        respuesta += `üõí ¬°Realizar una nueva compra!\n`;
        respuesta += `üìû Contactar servicio al cliente\n`;
        respuesta += `üí¨ ¬°Estoy aqu√≠ para ayudarle! üöÄ`;
        
        return respuesta;
      } else {
        return `‚ùå **ERROR DE CONSULTA** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üö´ No se pudo obtener informaci√≥n\n` +
               `üìû Contacte servicio al cliente\n` +
               `üÜò Error ID: ${Date.now().toString(36)} üÜò`;
      }
    } catch (error) {
      this.logger.error(`Error consultando saldo: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error consultando saldo\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async handleClientIdentification(identification: string, session: PersistentSession, chatbotId: string): Promise<string> {
    return await this.authenticateClientByCedula(identification, session, chatbotId);
  }

  private async authenticateClientByCedula(cedula: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const normalizedCedula = this.normalizeIdentification(cedula);
      
      const query = `
        SELECT 
          c.codigocliente,
          c.nombre,
          c.rif,
          c.direccion1,
          c.telefono1,
          c.telefono2,
          c.tienecredito,
          c.diascredito,
          c.saldo,
          c.status
        FROM clientes c
        WHERE c.rif = $1 OR c.rif = $2
        LIMIT 1
      `;
      
      const results = await this.valeryDbService.ejecutarQuery(query, [normalizedCedula, `V${normalizedCedula}`]);
      
      if (results && results.length > 0) {
        const cliente = results[0];
        
        // Actualizar sesi√≥n
        session.clientId = cliente.codigocliente;
        session.clientName = cliente.nombre;
        session.identificationNumber = normalizedCedula;
        session.isAuthenticated = true;
        session.isNewClient = false;
        session.context = 'menu';
        
        await this.chatService.saveSession(session);
        
        return `üéâ **¬°IDENTIFICACI√ìN EXITOSA!** üéâ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚úÖ **¬°Bienvenido ${cliente.nombre}!** ‚úÖ\n` +
               `üîê Autenticado correctamente\n` +
               `üåü ¬°Listo para atenderle!\n\n` +
               `üéØ **¬øC√ìMO LE PUEDO AYUDAR?** üéØ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n` +
               `1Ô∏è‚É£ üîç **Consultar productos** ‚Üí Ver cat√°logo\n` +
               `2Ô∏è‚É£ üí∞ **Ver mi saldo** ‚Üí Estado cuenta\n` +
               `3Ô∏è‚É£ üìÑ **Historial facturas** ‚Üí Mis compras\n` +
               `4Ô∏è‚É£ üõí **Hacer un pedido** ‚Üí ¬°Primera compra!\n\n` +
               `üí¨ O escriba directamente lo que necesita... üöÄ`;
      } else {
        // Cliente no encontrado - iniciar proceso de registro
        session.identificationNumber = normalizedCedula;
        session.isNewClient = true;
        session.isAuthenticated = false;
        session.context = 'new_client_registration';
        
        await this.chatService.saveSession(session);
        
        return `üÜï **¬°NUEVO CLIENTE DETECTADO!** üÜï\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìã C√©dula/RIF: ${normalizedCedula}\n` +
               `üö´ No existe en nuestros registros\n\n` +
               `‚ú® **¬°REGISTREMOS SU CUENTA!** ‚ú®\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üéÅ Proceso r√°pido y ofertas especiales\n` +
               `üîí Sus datos est√°n seguros con nosotros\n\n` +
               `üìù **PASO 1 DE 1:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üë§ Por favor, escriba su **NOMBRE COMPLETO**\n` +
               `üí° Ejemplo: "Juan Carlos P√©rez Gonz√°lez"\n\n` +
               `üöÄ ¬°Su experiencia premium comienza aqu√≠! üöÄ`;
      }
    } catch (error) {
      this.logger.error(`Error autenticando por c√©dula: ${error.message}`);
      return `‚ùå **ERROR DE VERIFICACI√ìN** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error t√©cnico temporal\n` +
             `‚è∞ Intente nuevamente\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private normalizeIdentification(cedula: string): string {
    return cedula.replace(/[^\d]/g, '');
  }

  private async handleGreeting(session: PersistentSession, chatbotId: string): Promise<string> {
    if (session.isAuthenticated) {
      return `üéâ **¬°HOLA DE NUEVO!** üéâ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üòä ${session.clientName}\n` +
             `‚ú® ¬°Qu√© gusto saludarle!\n\n` +
             `üéØ **¬øEN QU√â LE AYUDO HOY?** üéØ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üí¨ ¬°Estoy aqu√≠ para servirle! üöÄ`;
    } else {
      return `üëã **¬°HOLA Y BIENVENIDO!** üëã\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üåü **G√≥mezMarket** a su servicio\n` +
             `ü§ñ Soy **G√≥mezBot**\n\n` +
             `üîê **PARA COMENZAR:**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üìù Indique su c√©dula o RIF\n` +
             `‚ú® ¬°Servicio personalizado garantizado! ‚ú®`;
    }
  }

  private async handleHelpRequest(session: PersistentSession, chatbotId: string): Promise<string> {
    let helpMessage = `üÜò **¬°CENTRO DE AYUDA!** üÜò\n`;
    helpMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    helpMessage += `ü§ñ **G√≥mezBot** - Su asistente\n\n`;
    helpMessage += `üí¨ **COMANDOS DISPONIBLES:**\n`;
    helpMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    helpMessage += `üîç **Buscar:** "busco aceite" o "necesito arroz"\n`;
    helpMessage += `üî¢ **Opciones:** Escriba n√∫meros 1-4\n`;
    helpMessage += `üõí **Carrito:** "agregar producto 1"\n`;
    helpMessage += `üëÄ **Ver carrito:** "mi carrito"\n\n`;
    
    if (session.isAuthenticated) {
      helpMessage += `üéØ **SUS OPCIONES:**\n`;
      helpMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      helpMessage += `1Ô∏è‚É£ üîç **Consultar productos**\n`;
      helpMessage += `2Ô∏è‚É£ üí∞ **Ver saldo**\n`;
      helpMessage += `3Ô∏è‚É£ üìÑ **Historial**\n`;
      helpMessage += `4Ô∏è‚É£ üõí **Hacer pedido**\n\n`;
    }
    
    helpMessage += `üß† **¬°INTELIGENCIA ARTIFICIAL!**\n`;
    helpMessage += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    helpMessage += `üí¨ Escriba naturalmente\n`;
    helpMessage += `ü§ñ ¬°Entiendo su lenguaje!\n`;
    helpMessage += `üöÄ ¬°Estoy aqu√≠ para ayudarle! üöÄ`;
    
    return helpMessage;
  }

  private async handleUnknownIntent(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    // Si no se entiende el mensaje, intentar una b√∫squeda de productos
    if (message.length > 3) {
      return await this.handleIntelligentProductSearch(message, session, chatbotId);
    }
    
    return `ü§î **¬øPODR√çA SER M√ÅS ESPEC√çFICO?** ü§î\n` +
           `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
           `‚ùì No entend√≠ completamente\n\n` +
           `üí° **PUEDE INTENTAR:**\n` +
           `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
           `üîç Buscar productos espec√≠ficos\n` +
           `üìù Escribir n√∫meros 1-4 para opciones\n` +
           `üÜò Escribir "ayuda" para m√°s info\n\n` +
           `üí¨ ¬°Escriba naturalmente! üöÄ`;
  }

  private async handleIntelligentError(error: Error, chatbotId: string): Promise<string> {
    const errorId = Date.now().toString(36);
    this.logger.error(`Error ID ${errorId}: ${error.message}`);
    
    return `üòÖ **¬°UPS! INCONVENIENTE T√âCNICO** üòÖ\n` +
           `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
           `üîß Peque√±o problema temporal\n` +
           `‚ö° Nuestro equipo ya fue notificado\n\n` +
           `üÜî **ID de error:** ${errorId}\n\n` +
           `üîÑ **¬øQU√â PUEDE HACER?**\n` +
           `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
           `‚è∞ Intente nuevamente\n` +
           `üìû Contacte soporte si persiste\n` +
           `üöÄ ¬°Estamos aqu√≠ para ayudarle! üöÄ`;
  }

  // M√©todos auxiliares para persistencia
  private async saveMessage(session: PersistentSession, userMessage: string, botResponse: string): Promise<void> {
    try {
      // Guardar mensaje del usuario
      await this.chatService.saveMessage(session, userMessage, 'user');
      
      // Guardar respuesta del bot
      await this.chatService.saveMessage(session, botResponse, 'assistant');
    } catch (error) {
      this.logger.error(`Error guardando mensajes: ${error.message}`);
    }
  }

  private async saveSearchHistory(session: PersistentSession, originalTerm: string, normalizedTerm: string, resultsCount: number, chatbotId: string): Promise<void> {
    try {
      await this.chatService.saveSearchHistory(session, originalTerm, normalizedTerm, resultsCount, chatbotId);
    } catch (error) {
      this.logger.error(`Error guardando historial de b√∫squeda: ${error.message}`);
    }
  }

  private async getRecentSearches(phoneNumber: string, limit: number = 5): Promise<SearchHistory[]> {
    try {
      return await this.chatService.findRecentSearches(phoneNumber, limit);
    } catch (error) {
      this.logger.error(`Error obteniendo b√∫squedas recientes: ${error.message}`);
      return [];
    }
  }

  private async getActiveCartItems(phoneNumber: string): Promise<ShoppingCart[]> {
    try {
      return await this.chatService.findActiveCartItems(phoneNumber);
    } catch (error) {
      this.logger.error(`Error obteniendo carrito: ${error.message}`);
      return [];
    }
  }

  private async getSimilarSearchSuggestions(phoneNumber: string, searchTerm: string, limit: number = 3): Promise<string[]> {
    try {
      const recentSearches = await this.chatService.findSimilarSearchSuggestions(phoneNumber, searchTerm, limit);
      
      return recentSearches.map(row => row.term);
    } catch (error) {
      this.logger.error(`Error obteniendo sugerencias: ${error.message}`);
      return [];
    }
  }

  private async cleanInactiveSessions(): Promise<void> {
    try {
      const cutoffDate = new Date(Date.now() - this.SESSION_TIMEOUT);
      
      const result = await this.chatService.cleanInactiveSessions(cutoffDate);
      
      if (result.affected > 0) {
        this.logger.debug(`üßπ Marcadas ${result.affected} sesiones como inactivas`);
      }
    } catch (error) {
      this.logger.error(`Error limpiando sesiones inactivas: ${error.message}`);
    }
  }

  private formatearPrecio(precio: number): string {
    return new Intl.NumberFormat('es-VE', { style: 'currency', currency: 'USD' }).format(precio);
  }

  // M√©todos adicionales que se pueden implementar...
  private async handleCartAction(action: string, product: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      if (action.includes('agregar') || action.includes('a√±adir') || action.includes('quiero')) {
        // Extraer n√∫mero de producto
        const productNumber = this.extractProductNumber(action);
        
        if (productNumber === null) {
          return `‚ùå **N√öMERO DE PRODUCTO REQUERIDO** ‚ùå\n` +
                 `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
                 `üî¢ Especifique el n√∫mero del producto\n` +
                 `üí° Ejemplo: "Agregar producto 1 al carrito"\n` +
                 `üí° Ejemplo: "Quiero el producto 3"\n\n` +
                 `üîÑ ¬°Intente nuevamente! üîÑ`;
        }

        return await this.addProductToCart(productNumber, session, chatbotId);
      }
      
      if (action.includes('ver carrito') || action.includes('mi carrito') || action.includes('carrito')) {
        return await this.showCart(session);
      }
      
      if (action.includes('quitar') || action.includes('eliminar') || action.includes('remover')) {
        const productNumber = this.extractProductNumber(action);
        return await this.removeProductFromCart(productNumber, session);
      }
      
      if (action.includes('vaciar carrito') || action.includes('limpiar carrito')) {
        return await this.clearUserCart(session);
      }

      if (action.includes('proceder') || action.includes('comprar') || action.includes('finalizar')) {
        return await this.proceedToCheckout(session, chatbotId);
      }

      return `üõí **ACCI√ìN DE CARRITO NO RECONOCIDA** üõí\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `‚ùì No entend√≠ la acci√≥n solicitada\n\n` +
             `üîß **ACCIONES DISPONIBLES:**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `‚ûï Agregar producto [n√∫mero] al carrito\n` +
             `üëÄ Ver mi carrito\n` +
             `‚ûñ Quitar producto [n√∫mero]\n` +
             `üóëÔ∏è Vaciar carrito\n` +
             `üí≥ Proceder a comprar\n\n` +
             `üí¨ ¬°Escriba una de estas opciones! üöÄ`;
             
    } catch (error) {
      this.logger.error(`Error en acci√≥n de carrito: ${error.message}`);
      return `‚ùå **ERROR EN CARRITO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando acci√≥n\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private extractProductNumber(message: string): number | null {
    // Buscar n√∫meros en el mensaje
    const numbers = message.match(/\d+/g);
    if (numbers && numbers.length > 0) {
      return parseInt(numbers[0]);
    }
    return null;
  }

  private async addProductToCart(productNumber: number, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      // Necesitamos obtener los productos de la b√∫squeda m√°s reciente
      // Por ahora, voy a usar una b√∫squeda temporal. Idealmente deber√≠amos guardar 
      // los resultados de la √∫ltima b√∫squeda en la sesi√≥n
      
      // Obtener la √∫ltima b√∫squeda
      const recentSearches = await this.getRecentSearches(session.phoneNumber, 1);
      
      if (recentSearches.length === 0) {
        return `‚ùå **SIN B√öSQUEDAS RECIENTES** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîç Debe buscar productos primero\n` +
               `üí° Escriba el nombre de un producto\n` +
               `üöÄ ¬°Busque y despu√©s agregue al carrito! üöÄ`;
      }

      // Repetir la b√∫squeda para obtener los productos
      const lastSearch = recentSearches[0];
      const productos = await this.searchProductsWithStrategy(lastSearch.searchTerm, 'exact');
      
      if (productNumber < 1 || productNumber > productos.length) {
        return `‚ùå **N√öMERO DE PRODUCTO INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ N√∫mero v√°lido: 1 a ${productos.length}\n` +
               `üìã Verifique la lista de productos\n` +
               `üîÑ ¬°Intente con otro n√∫mero! üîÑ`;
      }

      const producto = productos[productNumber - 1];
      
      // Agregar al carrito
      const cartItem = await this.chatService.addToCart(session, producto, 1, chatbotId);
      
      // Calcular totales del carrito
      const cartTotals = await this.chatService.getCartTotal(session.phoneNumber);
      
      return `‚úÖ **¬°PRODUCTO AGREGADO AL CARRITO!** ‚úÖ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üì¶ **Producto agregado:**\n` +
             `üè∑Ô∏è ${producto.nombre}\n` +
             `üíµ $${parseFloat(producto.preciounidad).toFixed(2)} USD\n` +
             `üî¢ Cantidad: 1 unidad\n\n` +
             `üõí **RESUMEN DEL CARRITO:**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üìä ${cartTotals.itemCount} productos en total\n` +
             `üí∞ **Total:** $${cartTotals.totalUsd.toFixed(2)} USD\n` +
             `üáªüá™ **Total:** Bs ${cartTotals.totalBs.toFixed(2)}\n\n` +
             `üéØ **¬øQU√â DESEA HACER?**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `‚ûï Agregar m√°s productos\n` +
             `üëÄ Ver carrito completo\n` +
             `üí≥ Proceder a comprar\n` +
             `üîç Buscar otros productos\n\n` +
             `üí¨ ¬°Contin√∫e comprando! üöÄ`;
             
    } catch (error) {
      this.logger.error(`Error agregando al carrito: ${error.message}`);
      return `‚ùå **ERROR AGREGANDO PRODUCTO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß No se pudo agregar al carrito\n` +
             `‚è∞ Intente nuevamente\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async showCart(session: PersistentSession): Promise<string> {
    try {
      const cartItems = await this.chatService.findActiveCartItems(session.phoneNumber);
      
      if (cartItems.length === 0) {
        return `üõí **CARRITO VAC√çO** üõí\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üì≠ No tiene productos en el carrito\n\n` +
               `üîç **¬øQU√â DESEA HACER?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üõçÔ∏è Buscar productos\n` +
               `üìÇ Ver categor√≠as\n` +
               `üí¨ Escriba lo que necesita\n\n` +
               `üöÄ ¬°Comience a llenar su carrito! üöÄ`;
      }

      const cartTotals = await this.chatService.getCartTotal(session.phoneNumber);
      
      let respuesta = `üõí **MI CARRITO DE COMPRAS** üõí\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `üì¶ ${cartTotals.itemCount} productos ‚Ä¢ $${cartTotals.totalUsd.toFixed(2)} USD\n\n`;
      
      cartItems.forEach((item, index) => {
        const subtotal = item.unitPriceUsd * item.quantity;
        const subtotalBs = subtotal * (1 + (item.ivaTax / 100)) * item.exchangeRate;
        
        respuesta += `${index + 1}Ô∏è‚É£ **${item.productName}**\n`;
        respuesta += `   üíµ $${Number(item.unitPriceUsd || 0).toFixed(2)} x ${item.quantity} = $${subtotal.toFixed(2)}\n`;
        respuesta += `   üáªüá™ Bs ${subtotalBs.toFixed(2)}\n\n`;
      });
      
      respuesta += `üí∞ **TOTAL DEL CARRITO:**\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `üíµ **USD:** $${cartTotals.totalUsd.toFixed(2)}\n`;
      respuesta += `üáªüá™ **Bol√≠vares:** Bs ${cartTotals.totalBs.toFixed(2)}\n\n`;
      respuesta += `üéØ **ACCIONES DISPONIBLES:**\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `‚ûï Seguir comprando\n`;
      respuesta += `‚ûñ Quitar producto [n√∫mero]\n`;
      respuesta += `üóëÔ∏è Vaciar carrito\n`;
      respuesta += `üí≥ Proceder a comprar\n\n`;
      respuesta += `üí¨ ¬°Escriba su pr√≥xima acci√≥n! üöÄ`;
      
      return respuesta;
      
    } catch (error) {
      this.logger.error(`Error mostrando carrito: ${error.message}`);
      return `‚ùå **ERROR CONSULTANDO CARRITO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error obteniendo informaci√≥n\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async removeProductFromCart(productNumber: number | null, session: PersistentSession): Promise<string> {
    try {
      if (productNumber === null) {
        return `‚ùå **N√öMERO DE PRODUCTO REQUERIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ Especifique qu√© producto quitar\n` +
               `üí° Ejemplo: "Quitar producto 2"\n` +
               `üëÄ Use "ver carrito" para ver n√∫meros\n\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      const cartItems = await this.chatService.findActiveCartItems(session.phoneNumber);
      
      if (cartItems.length === 0) {
        return `üõí **CARRITO VAC√çO** üõí\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üì≠ No hay productos para quitar\n` +
               `üöÄ ¬°Comience a agregar productos! üöÄ`;
      }

      if (productNumber < 1 || productNumber > cartItems.length) {
        return `‚ùå **N√öMERO INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ N√∫mero v√°lido: 1 a ${cartItems.length}\n` +
               `üëÄ Use "ver carrito" para verificar\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      const itemToRemove = cartItems[productNumber - 1];
      const success = await this.chatService.removeFromCart(session.phoneNumber, itemToRemove.productCode);
      
      if (success) {
        const newTotals = await this.chatService.getCartTotal(session.phoneNumber);
        
        return `‚úÖ **¬°PRODUCTO ELIMINADO!** ‚úÖ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üóëÔ∏è **Producto eliminado:**\n` +
               `üè∑Ô∏è ${itemToRemove.productName}\n` +
               `üíµ $${itemToRemove.unitPriceUsd.toFixed(2)} x ${itemToRemove.quantity}\n\n` +
               `üõí **CARRITO ACTUALIZADO:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìä ${newTotals.itemCount} productos restantes\n` +
               `üí∞ **Total:** $${newTotals.totalUsd.toFixed(2)} USD\n\n` +
               `üéØ **¬øQU√â DESEA HACER?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üëÄ Ver carrito\n` +
               `‚ûï Seguir comprando\n` +
               `üí≥ Proceder a comprar\n\n` +
               `üí¨ ¬°Contin√∫e con su compra! üöÄ`;
      } else {
        return `‚ùå **ERROR ELIMINANDO PRODUCTO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîß No se pudo eliminar\n` +
               `üÜò ID: ${Date.now().toString(36)} üÜò`;
      }
      
    } catch (error) {
      this.logger.error(`Error quitando producto del carrito: ${error.message}`);
      return `‚ùå **ERROR EN ELIMINACI√ìN** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando eliminaci√≥n\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async clearUserCart(session: PersistentSession): Promise<string> {
    try {
      const itemsCount = await this.chatService.clearCart(session.phoneNumber);
      
      if (itemsCount > 0) {
        return `‚úÖ **¬°CARRITO VACIADO!** ‚úÖ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üóëÔ∏è ${itemsCount} productos eliminados\n` +
               `üì≠ Carrito ahora est√° vac√≠o\n\n` +
               `üîç **¬øQU√â DESEA HACER?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üõçÔ∏è Buscar productos\n` +
               `üìÇ Ver categor√≠as\n` +
               `üí¨ Escriba lo que necesita\n\n` +
               `üöÄ ¬°Comience una nueva compra! üöÄ`;
      } else {
        return `üõí **CARRITO YA ESTABA VAC√çO** üõí\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üì≠ No hab√≠a productos para eliminar\n` +
               `üöÄ ¬°Comience a agregar productos! üöÄ`;
      }
      
    } catch (error) {
      this.logger.error(`Error vaciando carrito: ${error.message}`);
      return `‚ùå **ERROR VACIANDO CARRITO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error en la operaci√≥n\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async proceedToCheckout(session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const cartItems = await this.chatService.findActiveCartItems(session.phoneNumber);
      
      if (cartItems.length === 0) {
        return `üõí **CARRITO VAC√çO** üõí\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üì≠ Agregue productos antes de comprar\n` +
               `üîç Busque productos para empezar\n` +
               `üöÄ ¬°Llene su carrito primero! üöÄ`;
      }

      const cartTotals = await this.chatService.getCartTotal(session.phoneNumber);
      
      // Cambiar contexto a checkout
      session.context = 'checkout_payment_selection';
      await this.chatService.saveSession(session);
      
      return `üí≥ **¬°SELECCIONE M√âTODO DE PAGO!** üí≥\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üõí ${cartTotals.itemCount} productos en carrito\n` +
             `üí∞ **Total:** $${cartTotals.totalUsd.toFixed(2)} USD\n` +
             `üáªüá™ **Total:** Bs ${cartTotals.totalBs.toFixed(2)}\n\n` +
             `üí≥ **M√âTODOS DE PAGO DISPONIBLES:**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `1Ô∏è‚É£ üì± **PAGO M√ìVIL** (Bol√≠vares)\n` +
             `2Ô∏è‚É£ üí≥ **ZELLE** (USD)\n` +
             `3Ô∏è‚É£ üè¶ **TRANSFERENCIA USD**\n` +
             `4Ô∏è‚É£ üíµ **EFECTIVO BOL√çVARES**\n` +
             `5Ô∏è‚É£ üèß **PUNTO DE VENTA**\n` +
             `6Ô∏è‚É£ üí∞ **EFECTIVO USD**\n\n` +
             `üìù **¬øC√ìMO PROCEDER?**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üî¢ Escriba el n√∫mero del m√©todo (1-6)\n` +
             `üîÑ O escriba "cancelar" para volver\n` +
             `üí¨ Ejemplo: "1" para Pago M√≥vil`;
             
    } catch (error) {
      this.logger.error(`Error en checkout: ${error.message}`);
      return `‚ùå **ERROR EN CHECKOUT** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando compra\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar selecci√≥n de m√©todo de pago
   */
  private async handlePaymentSelection(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const metodo = parseInt(message.trim());
      
      if (isNaN(metodo) || metodo < 1 || metodo > 6) {
        return `‚ùå **M√âTODO INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ Seleccione un n√∫mero del 1 al 6\n` +
               `üí° Ejemplo: escriba "2" para Zelle\n\n` +
               `üí≥ **M√âTODOS DISPONIBLES:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `1Ô∏è‚É£ Pago M√≥vil | 2Ô∏è‚É£ Zelle\n` +
               `3Ô∏è‚É£ Transferencia USD | 4Ô∏è‚É£ Efectivo Bs\n` +
               `5Ô∏è‚É£ Punto de Venta | 6Ô∏è‚É£ Efectivo USD`;
      }

      // Si es Pago M√≥vil (opci√≥n 1), activar flujo de validaci√≥n
      if (metodo === 1) {
        // Obtener lista de bancos
        const bancos = await this.valeryDbService.obtenerBancos();
        
        if (!bancos || bancos.length === 0) {
          return `‚ùå **ERROR EN SISTEMA BANCARIO** ‚ùå\n` +
                 `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
                 `üè¶ No se pueden obtener bancos\n` +
                 `‚è∞ Intente m√°s tarde\n` +
                 `üìû O contacte servicio al cliente`;
        }

        // Cambiar contexto para selecci√≥n de banco
        session.context = 'payment_bank_selection';
        await this.chatService.saveSession(session);

        let respuesta = `üè¶ **SELECCIONE SU BANCO** üè¶\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        respuesta += `üì± Ha seleccionado: **PAGO M√ìVIL**\n`;
        respuesta += `üí∞ Moneda: **BOL√çVARES**\n\n`;
        respuesta += `üè¶ **BANCOS DISPONIBLES:**\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;

        for (const banco of bancos) {
          respuesta += `üîπ **${banco.codigo}** - ${banco.banco}\n`;
        }

        respuesta += `\nüí° **¬øC√ìMO SELECCIONAR?**\n`;
        respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        respuesta += `üî¢ Escriba el c√≥digo de 4 d√≠gitos\n`;
        respuesta += `üí° Ejemplo: 0102, 0134, 0151\n\n`;
        respuesta += `üîÑ Escriba "cancelar" para volver`;

        return respuesta;
      }

      // Para otros m√©todos, usar el flujo original
      const resultado = await this.createOrderFromCart(session.phoneNumber, metodo);
      
      if (resultado.success) {
        // Limpiar carrito despu√©s de crear pedido exitoso
        await this.chatService.clearCart(session.phoneNumber);
        
        // Cambiar contexto de vuelta al men√∫
        session.context = 'menu';
        await this.chatService.saveSession(session);
        
        const metodosTexto = {
          1: 'üì± PAGO M√ìVIL',
          2: 'üí≥ ZELLE',
          3: 'üè¶ TRANSFERENCIA USD',
          4: 'üíµ EFECTIVO BOL√çVARES',
          5: 'üèß PUNTO DE VENTA',
          6: 'üí∞ EFECTIVO USD'
        };
        
        return `üéâ **¬°PEDIDO CREADO EXITOSAMENTE!** üéâ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚úÖ **ID Pedido:** ${resultado.idencabedoc}\n` +
               `üí≥ **M√©todo:** ${metodosTexto[metodo]}\n` +
               `üí∞ **Total:** $${resultado.detalles.total.toFixed(2)} ${resultado.detalles.moneda}\n` +
               `üì¶ **Productos:** ${resultado.detalles.productos} items\n\n` +
               `üìã **INFORMACI√ìN IMPORTANTE:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìû Contacto para coordinar entrega\n` +
               `üí≥ Datos de pago ser√°n enviados\n` +
               `üì¶ Preparaci√≥n: 24-48 horas\n` +
               `üöö Entrega seg√∫n ubicaci√≥n\n\n` +
               `üéØ **¬øQU√â DESEA HACER AHORA?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîç Buscar m√°s productos\n` +
               `üìÑ Ver historial de pedidos\n` +
               `üí¨ Escriba lo que necesita\n\n` +
               `üöÄ ¬°Gracias por su compra! üöÄ`;
      } else {
        return `‚ùå **ERROR AL CREAR PEDIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîß ${resultado.error}\n` +
               `‚è∞ Intente nuevamente\n` +
               `üìû O contacte servicio al cliente\n` +
               `üÜò ID: ${Date.now().toString(36)} üÜò`;
      }
      
    } catch (error) {
      this.logger.error(`Error en selecci√≥n de pago: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando m√©todo de pago\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Crear pedido desde carrito de compras
   */
  private async createOrderFromCart(phoneNumber: string, metodoPago: number): Promise<any> {
    try {
      // Convertir carrito a formato de pedido
      const datosCarrito = await this.valeryDbService.convertirCarritoAPedido(phoneNumber, metodoPago);
      
      // Crear pedido usando el sistema completo
      const resultado = await this.valeryDbService.crearPedidoCompleto(datosCarrito);
      
      this.logger.log(`‚úÖ Pedido creado desde carrito: ${resultado.idencabedoc} para ${phoneNumber}`);
      
      return resultado;
      
    } catch (error) {
      this.logger.error(`Error creando pedido desde carrito: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Detectar si el mensaje es una lista de productos
   */
  private esListaProductos(message: string): boolean {
    // Buscar indicadores de lista: comas, saltos de l√≠nea, m√∫ltiples productos
    const indicadoresLista = [
      /,.*,/,  // M√∫ltiples comas
      /\n.*\n/, // M√∫ltiples l√≠neas
      /;.*;/, // M√∫ltiples punto y coma
      /lista de/i,
      /necesito.*,/i,
      /quiero.*,/i
    ];

    return indicadoresLista.some(patron => patron.test(message)) || 
           message.split(/[,\n;]/).length > 2;
  }

  /**
   * Manejar b√∫squeda de productos por lista
   */
  private async handleProductListSearch(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const resultados = await this.valeryDbService.buscarProductosPorLista(message);
      
      // Verificar si resultados es el objeto estructurado esperado
      if (!resultados || Array.isArray(resultados)) {
        return `üòî **¬°NO ENCONTRAMOS PRODUCTOS DE SU LISTA!** üòî\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìù Lista analizada\n` +
               `‚ùå Sin resultados disponibles\n\n` +
               `üí° **SUGERENCIAS:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîÑ Revise la ortograf√≠a\n` +
               `üìù Use nombres m√°s espec√≠ficos\n` +
               `üí¨ Busque productos individuales\n\n` +
               `üöÄ ¬°Intente con otra lista! üöÄ`;
      }

      const productos = resultados.productos || [];
      const terminos = resultados.terminos || [];
      const estadisticas = resultados.estadisticas || { terminosBuscados: 0, productosEncontrados: 0, promedioPorTermino: 0 };
      
      if (!productos || productos.length === 0) {
        return `üòî **¬°NO ENCONTRAMOS PRODUCTOS DE SU LISTA!** üòî\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìù Lista analizada: ${terminos.join(', ')}\n` +
               `‚ùå Sin resultados disponibles\n\n` +
               `üí° **SUGERENCIAS:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîÑ Revise la ortograf√≠a\n` +
               `üìù Use nombres m√°s espec√≠ficos\n` +
               `üí¨ Busque productos individuales\n\n` +
               `üöÄ ¬°Intente con otra lista! üöÄ`;
      }

      let respuesta = `üõçÔ∏è **¬°PRODUCTOS DE SU LISTA ENCONTRADOS!** üõçÔ∏è\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `üìã T√©rminos buscados: ${estadisticas.terminosBuscados}\n`;
      respuesta += `üì¶ Productos encontrados: ${estadisticas.productosEncontrados}\n`;
      respuesta += `üìä Promedio por t√©rmino: ${estadisticas.promedioPorTermino}\n\n`;

      for (let i = 0; i < Math.min(productos.length, 15); i++) {
        const p = productos[i];
        if (!p.nombre || !p.preciounidad || !p.tasa_actual) continue;

        const precioUSD = (parseFloat(p.preciounidad) || 0).toFixed(2);
        const precioBs = this.calcularPrecioBs(p.preciounidad, p.alicuotaiva, p.tasa_actual).toFixed(2);

        respuesta += `üè∑Ô∏è **PRODUCTO ${i + 1}** üè∑Ô∏è\n`;
        respuesta += `üìå **${p.nombre}**\n`;
        respuesta += `üíµ **USD:** $${precioUSD}\n`;
        respuesta += `üáªüá™ **Bol√≠vares:** Bs ${precioBs}\n`;
        respuesta += `üì¶ **Stock:** ${p.existenciaunidad} unidades\n\n`;
      }

      if (productos.length > 15) {
        respuesta += `... y ${productos.length - 15} productos m√°s.\n\n`;
      }

      respuesta += `üõí **¬øC√ìMO AGREGAR AL CARRITO?** üõí\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `‚úÖ "Agregar [n√∫mero] al carrito"\n`;
      respuesta += `‚úÖ "Quiero el producto [n√∫mero]"\n\n`;
      respuesta += `üîç **¬øDesea refinar su lista?** üîç\n`;
      respuesta += `üí¨ ¬°Escriba una nueva lista o elija productos! üöÄ`;

      return respuesta;

    } catch (error) {
      this.logger.error(`Error en b√∫squeda por lista: ${error.message}`);
      return `‚ùå **ERROR EN B√öSQUEDA POR LISTA** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando su lista\n` +
             `‚è∞ Intente nuevamente\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar selecci√≥n de banco para pago m√≥vil
   */
  private async handleBankSelection(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const codigoBanco = message.trim();
      
      // Validar que sea un c√≥digo de banco v√°lido (4 d√≠gitos)
      if (!/^\d{4}$/.test(codigoBanco)) {
        return `‚ùå **C√ìDIGO DE BANCO INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ Debe ser exactamente 4 d√≠gitos\n` +
               `üí° Ejemplo: 0102, 0134, 0151\n` +
               `üìã Revise la lista de bancos\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      // Buscar el banco en la base de datos
      const bancos = await this.valeryDbService.obtenerBancos();
      const bancoSeleccionado = bancos.find(b => b.codigo === codigoBanco);

      if (!bancoSeleccionado) {
        return `‚ùå **BANCO NO ENCONTRADO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üè¶ C√≥digo ${codigoBanco} no v√°lido\n` +
               `üìã Revise la lista de bancos disponibles\n` +
               `üîÑ ¬°Intente con otro c√≥digo! üîÑ`;
      }

      // Guardar selecci√≥n en metadata
      session.metadata = {
        ...session.metadata,
        pagoMovil: {
          ...session.metadata?.pagoMovil,
          codigoBanco: codigoBanco,
          nombreBanco: bancoSeleccionado.banco
        }
      };

      // Cambiar contexto para solicitar n√∫mero de tel√©fono emisor
      session.context = 'payment_phone_input';
      await this.chatService.saveSession(session);

      return `‚úÖ **BANCO SELECCIONADO** ‚úÖ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üè¶ **Banco:** ${bancoSeleccionado.banco}\n` +
             `üî¢ **C√≥digo:** ${codigoBanco}\n\n` +
             `üì± **SIGUIENTE PASO** üì±\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üìû Ingrese el n√∫mero de tel√©fono\n` +
             `üì≤ desde el cual realiz√≥ el pago\n` +
             `üí° Ejemplo: 04141234567\n\n` +
             `üîÑ Escriba "cancelar" para volver`;

    } catch (error) {
      this.logger.error(`Error en selecci√≥n de banco: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando banco\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar entrada de n√∫mero de tel√©fono emisor
   */
  private async handlePaymentPhoneInput(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      if (message.toLowerCase().includes('cancelar')) {
        session.context = 'menu';
        await this.chatService.saveSession(session);
        return `üîÑ **PAGO CANCELADO** üîÑ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚Ü©Ô∏è Regresando al men√∫ principal\n` +
               `üí¨ ¬øEn qu√© m√°s puedo ayudarle?`;
      }

      const telefono = message.replace(/\D/g, ''); // Solo n√∫meros

      // Validar formato de tel√©fono venezolano
      if (!/^(0414|0424|0412|0416|0426)\d{7}$/.test(telefono) && !/^(414|424|412|416|426)\d{7}$/.test(telefono)) {
        return `‚ùå **N√öMERO DE TEL√âFONO INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üì± Debe ser un n√∫mero m√≥vil venezolano\n` +
               `üí° Ejemplos v√°lidos:\n` +
               `   üìû 04141234567\n` +
               `   üìû 04241234567\n` +
               `   üìû 04121234567\n\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      // Normalizar tel√©fono
      const telefonoNormalizado = telefono.startsWith('0') ? telefono : `0${telefono}`;

      // Guardar en metadata
      session.metadata = {
        ...session.metadata,
        pagoMovil: {
          ...session.metadata?.pagoMovil,
          telefonoEmisor: telefonoNormalizado
        }
      };

      // Cambiar contexto para solicitar c√©dula
      session.context = 'payment_cedula_input';
      await this.chatService.saveSession(session);

      return `‚úÖ **TEL√âFONO REGISTRADO** ‚úÖ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üì± **Tel√©fono:** ${telefonoNormalizado}\n\n` +
             `üÜî **SIGUIENTE PASO** üÜî\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üìù Ingrese la c√©dula de identidad\n` +
             `üë§ de la persona que realiz√≥ el pago\n` +
             `üí° Ejemplo: V12345678 o 12345678\n\n` +
             `üîÑ Escriba "cancelar" para volver`;

    } catch (error) {
      this.logger.error(`Error en entrada de tel√©fono: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando tel√©fono\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar entrada de c√©dula del pagador
   */
  private async handlePaymentCedulaInput(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      if (message.toLowerCase().includes('cancelar')) {
        session.context = 'menu';
        await this.chatService.saveSession(session);
        return `üîÑ **PAGO CANCELADO** üîÑ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚Ü©Ô∏è Regresando al men√∫ principal\n` +
               `üí¨ ¬øEn qu√© m√°s puedo ayudarle?`;
      }

      // Normalizar c√©dula
      let cedula = message.replace(/\D/g, '');
      const prefijo = message.toUpperCase().match(/^[VEJP]/)?.[0] || 'V';
      
      // Validar longitud de c√©dula
      if (cedula.length < 6 || cedula.length > 9) {
        return `‚ùå **C√âDULA INV√ÅLIDA** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üÜî Debe tener entre 6 y 9 d√≠gitos\n` +
               `üí° Ejemplos v√°lidos:\n` +
               `   üìù V12345678\n` +
               `   üìù 12345678\n` +
               `   üìù J123456789\n\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      const cedulaCompleta = `${prefijo}${cedula}`;

      // Validar que el cliente existe en la base de datos
      const clienteValido = await this.valeryDbService.validarCliente(cedula);

      // Guardar en metadata
      session.metadata = {
        ...session.metadata,
        pagoMovil: {
          ...session.metadata?.pagoMovil,
          cedulaPagador: cedulaCompleta,
          clienteValidado: !!clienteValido
        }
      };

      // Cambiar contexto para solicitar referencia
      session.context = 'payment_reference_input';
      await this.chatService.saveSession(session);

      let respuesta = `‚úÖ **C√âDULA REGISTRADA** ‚úÖ\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `üÜî **C√©dula:** ${cedulaCompleta}\n`;
      
      if (clienteValido) {
        respuesta += `üë§ **Cliente:** ${clienteValido.nombre}\n`;
        respuesta += `‚úÖ **Cliente verificado en sistema**\n\n`;
      } else {
        respuesta += `‚ö†Ô∏è **Cliente no encontrado en sistema**\n`;
        respuesta += `üìù Se registrar√° como nuevo cliente\n\n`;
      }

      respuesta += `üî¢ **√öLTIMO PASO** üî¢\n`;
      respuesta += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      respuesta += `üí≥ Ingrese los √∫ltimos 4 d√≠gitos\n`;
      respuesta += `üìã de la referencia del pago\n`;
      respuesta += `üí° Ejemplo: 1234\n\n`;
      respuesta += `üîÑ Escriba "cancelar" para volver`;

      return respuesta;

    } catch (error) {
      this.logger.error(`Error en entrada de c√©dula: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando c√©dula\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar entrada de referencia de pago
   */
  private async handlePaymentReferenceInput(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      if (message.toLowerCase().includes('cancelar')) {
        session.context = 'menu';
        await this.chatService.saveSession(session);
        return `üîÑ **PAGO CANCELADO** üîÑ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚Ü©Ô∏è Regresando al men√∫ principal\n` +
               `üí¨ ¬øEn qu√© m√°s puedo ayudarle?`;
      }

      const referencia = message.replace(/\D/g, ''); // Solo n√∫meros

      // Validar que sean exactamente 4 d√≠gitos
      if (!/^\d{4}$/.test(referencia)) {
        return `‚ùå **REFERENCIA INV√ÅLIDA** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üî¢ Debe ingresar exactamente 4 d√≠gitos\n` +
               `üí° Ejemplo: 1234\n` +
               `üìã Revise el comprobante de pago\n` +
               `üîÑ ¬°Intente nuevamente! üîÑ`;
      }

      // Completar datos de pago y crear el pedido
      const pagoMovilData = session.metadata?.pagoMovil;
      
      if (!pagoMovilData?.codigoBanco || !pagoMovilData?.telefonoEmisor || !pagoMovilData?.cedulaPagador) {
        return `‚ùå **ERROR EN DATOS DE PAGO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîß Faltan datos del proceso\n` +
               `üîÑ Debe reiniciar el proceso de pago\n` +
               `üí¨ Seleccione m√©todo de pago nuevamente`;
      }

      // Crear el pedido
      const cartTotals = await this.chatService.getCartTotal(session.phoneNumber);
      const resultadoPedido = await this.createOrderFromCart(session.phoneNumber, 1); // 1 = Pago M√≥vil

      if (!resultadoPedido.success) {
        return `‚ùå **ERROR AL CREAR PEDIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîß ${resultadoPedido.error}\n` +
               `‚è∞ Intente nuevamente\n` +
               `üÜò ID: ${Date.now().toString(36)} üÜò`;
      }

      // Registrar informaci√≥n completa del pago
      await this.valeryDbService.registrarInformacionPago({
        idencabedoc: resultadoPedido.idencabedoc,
        idtipo: 1, // Pago M√≥vil
        monto: cartTotals.totalBs, // En bol√≠vares para pago m√≥vil
        codigobanco: parseInt(pagoMovilData.codigoBanco),
        banco: pagoMovilData.nombreBanco,
        clienteid: pagoMovilData.cedulaPagador,
        telefono: pagoMovilData.telefonoEmisor,
        nroreferencia: referencia
      });

      // Limpiar carrito y resetear contexto
      await this.chatService.clearCart(session.phoneNumber);
      session.context = 'menu';
      session.metadata = {
        ...session.metadata,
        pagoMovil: undefined
      };
      await this.chatService.saveSession(session);

      return `üéâ **¬°PEDIDO CREADO CON PAGO M√ìVIL!** üéâ\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `‚úÖ **ID Pedido:** ${resultadoPedido.idencabedoc}\n` +
             `üè¶ **Banco:** ${pagoMovilData.nombreBanco} (${pagoMovilData.codigoBanco})\n` +
             `üì± **Tel√©fono:** ${pagoMovilData.telefonoEmisor}\n` +
             `üÜî **C√©dula:** ${pagoMovilData.cedulaPagador}\n` +
             `üî¢ **Ref:** ****${referencia}\n` +
             `üí∞ **Total:** Bs ${cartTotals.totalBs.toFixed(2)}\n\n` +
             `üìã **INFORMACI√ìN IMPORTANTE:**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `‚è≥ Su pago ser√° validado en tiempo real\n` +
             `üìû Recibir√° confirmaci√≥n por WhatsApp\n` +
             `üöö Preparaci√≥n: 24-48 horas\n` +
             `üì¶ Se le notificar√° cuando est√© listo\n\n` +
             `üéØ **¬øQU√â DESEA HACER AHORA?**\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîç Buscar m√°s productos\n` +
             `üìÑ Ver historial de pedidos\n` +
             `üí¨ Escriba lo que necesita\n\n` +
             `üöÄ ¬°Gracias por su compra! üöÄ`;

    } catch (error) {
      this.logger.error(`Error en entrada de referencia: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error procesando referencia\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  /**
   * Manejar registro de cliente nuevo (restaurando m√©todo original)
   */
  private async handleNewClientRegistration(message: string, session: PersistentSession, chatbotId: string): Promise<string> {
    try {
      const nombreCompleto = message.trim();
      
      // Validar que el nombre tenga al menos 2 palabras
      const palabras = nombreCompleto.split(' ').filter(palabra => palabra.length > 0);
      if (palabras.length < 2) {
        return `‚ùå **NOMBRE INCOMPLETO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìù Necesito su nombre Y apellido completo\n` +
               `üí° Ejemplo: "Juan Carlos P√©rez Gonz√°lez"\n\n` +
               `üîÑ **Por favor, intente nuevamente:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üë§ Escriba su nombre completo\n` +
               `‚ú® ¬°Estamos a un paso de terminar! ‚ú®`;
      }
      
      // Validar que no tenga caracteres especiales raros
      if (!/^[a-zA-Z√Ä-√ø√±√ë\s]+$/.test(nombreCompleto)) {
        return `‚ùå **FORMATO DE NOMBRE INV√ÅLIDO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üìù Solo se permiten letras y espacios\n` +
               `üö´ Sin n√∫meros ni s√≠mbolos especiales\n\n` +
               `üí° **Ejemplo correcto:**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üë§ "Juan Carlos P√©rez Gonz√°lez"\n` +
               `üîÑ Intente nuevamente por favor üîÑ`;
      }

      // Crear el nuevo cliente en la base de datos externa
      const nuevoCliente = await this.createNewClient(nombreCompleto, session.identificationNumber, session.phoneNumber);

      if (nuevoCliente.success) {
        // Actualizar sesi√≥n con informaci√≥n del cliente registrado
        session.clientId = nuevoCliente.codigocliente;
        session.clientName = nombreCompleto;
        session.isAuthenticated = true;
        session.isNewClient = false;
        session.context = 'menu';
        
        await this.chatService.saveSession(session);
        
        return `üéä **¬°REGISTRO EXITOSO!** üéä\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚úÖ **¬°Bienvenido ${nombreCompleto}!** ‚úÖ\n` +
               `üÜï Cliente registrado: ${nuevoCliente.codigocliente}\n` +
               `üéÅ ¬°Cuenta creada exitosamente!\n\n` +
               `üåü **¬°OFERTAS DE BIENVENIDA!** üåü\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üéØ Productos con descuentos especiales\n` +
               `üöÄ Servicio personalizado garantizado\n` +
               `üíé Experiencia premium desde el primer d√≠a\n\n` +
               `üéØ **¬øC√ìMO LE PUEDO AYUDAR?** üéØ\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n` +
               `1Ô∏è‚É£ üîç **Consultar productos** ‚Üí Ver cat√°logo\n` +
               `2Ô∏è‚É£ üí∞ **Ver mi saldo** ‚Üí Estado cuenta\n` +
               `3Ô∏è‚É£ üìÑ **Historial facturas** ‚Üí Mis compras\n` +
               `4Ô∏è‚É£ üõí **Hacer un pedido** ‚Üí ¬°Primera compra!\n\n` +
               `üí¨ O escriba directamente lo que necesita... üöÄ`;
      } else {
        return `‚ùå **ERROR EN EL REGISTRO** ‚ùå\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `üîß No se pudo crear la cuenta\n` +
               `‚ö†Ô∏è Error: ${nuevoCliente.error}\n\n` +
               `üîÑ **¬øQU√â PUEDE HACER?**\n` +
               `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
               `‚è∞ Intente nuevamente\n` +
               `üìû Contacte servicio al cliente\n` +
               `üÜò ID: ${Date.now().toString(36)} üÜò`;
      }
      
    } catch (error) {
      this.logger.error(`Error en registro de cliente: ${error.message}`);
      return `‚ùå **ERROR T√âCNICO** ‚ùå\n` +
             `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n` +
             `üîß Error durante el registro\n` +
             `‚è∞ Intente m√°s tarde\n` +
             `üÜò ID: ${Date.now().toString(36)} üÜò`;
    }
  }

  private async createNewClient(nombreCompleto: string, cedula: string, telefono: string): Promise<any> {
    try {
      // Obtener el pr√≥ximo ID disponible
      const maxIdQuery = `SELECT COALESCE(MAX(idcliente), 0) + 1 as next_id FROM clientes`;
      const maxIdResult = await this.valeryDbService.ejecutarQuery(maxIdQuery);
      const nextId = maxIdResult[0]?.next_id || 1;
      
      // Preparar datos del nuevo cliente
      const codigoCliente = cedula; // Usar la c√©dula como c√≥digo de cliente
      const rifFormateado = cedula.startsWith('V') || cedula.startsWith('J') || cedula.startsWith('E') || cedula.startsWith('P') 
        ? cedula 
        : `V${cedula}`;
      
      const insertQuery = `
        INSERT INTO clientes (
          idcliente, 
          codigocliente, 
          nombre, 
          rif, 
          direccion1, 
          direccion2, 
          idpais, 
          idestado, 
          idciudad, 
          idmunicipio, 
          codigopostal, 
          telefono1, 
          telefono2, 
          email, 
          tienecredito, 
          esexento, 
          diascredito, 
          saldo, 
          pagos, 
          fechaultimaventa, 
          fechacreacion, 
          fechacredito, 
          esagentederetencion, 
          redsocial1, 
          redsocial2, 
          redsocial3, 
          status, 
          coordenadas
        ) VALUES (
          $1, $2, $3, $4, '', '', 1, 1, 1, 1, '', 
          $5, '', '', 0, 0, 0, '0', '0', 
          NULL, NOW(), NOW(), 0, 
          NULL, NULL, NULL, '1', '10.5100, -66.9100'
        )
        RETURNING idcliente, codigocliente
      `;
      
      const params = [
        nextId,
        codigoCliente,
        nombreCompleto.toUpperCase(),
        rifFormateado,
        telefono
      ];
      
      const result = await this.valeryDbService.ejecutarQuery(insertQuery, params);
      
      if (result && result.length > 0) {
        this.logger.log(`‚úÖ Cliente creado exitosamente: ${codigoCliente} - ${nombreCompleto}`);
        return {
          success: true,
          codigocliente: codigoCliente,
          idcliente: result[0].idcliente
        };
      } else {
        return {
          success: false,
          error: 'No se pudo insertar el registro'
        };
      }
      
    } catch (error) {
      this.logger.error(`Error creando cliente: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }
}
